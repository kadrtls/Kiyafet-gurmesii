import os
import requests
import logging
import json
from dotenv import load_dotenv
from flask import Flask, request, jsonify
import firebase_admin
from firebase_admin import credentials, storage
import openai
from crewai import Agent, LLM, Task, Crew, Process
from crewai_tools import SerperDevTool

# Çevresel değişkenleri yükle
load_dotenv()

# API Anahtarları
openai_api_key = os.getenv("OPENAI_API_KEY")
serp_api_key = os.getenv("SERP_API_KEY")
weather_api_key = os.getenv("OPENWEATHERMAP_API_KEY")

# Firebase için kimlik doğrulaması
cred = credentials.Certificate("C:/Users/ASUS/Downloads/clothing-gourmet-firebase-adminsdk-fzq64-34b87561dc.json")
firebase_admin.initialize_app(cred, {
    'storageBucket': 'clothing-gourmet.firebasestorage.app'  # Firebase Console'dan aldığınız bucket adı
})

# OpenAI API anahtarını ayarla
openai.api_key = os.getenv("OPENAI_API_KEY")

# Anahtarların varlığını kontrol et
if not all([openai_api_key, serp_api_key, weather_api_key]):
    raise EnvironmentError("API anahtarları eksik! Lütfen .env dosyasını kontrol edin.")

# Flask uygulaması
app = Flask(__name__)

# Loglama ayarları
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("app.log"),
        logging.StreamHandler()
    ]
)

# Hava durumu verisi alma fonksiyonu
def get_weather_data(city_name, api_key):
    base_url = "https://api.openweathermap.org/data/2.5/weather"
    params = {
        "q": city_name,
        "appid": api_key,
        "units": "metric",
        "lang": "tr"
    }
    try:
        response = requests.get(base_url, params=params, timeout=120)  # Timeout süresi 120 saniye olarak ayarlandı
        response.raise_for_status()
        weather_data = response.json()
        return {
            "city": weather_data["name"],
            "temp": weather_data["main"]["temp"],
            "description": weather_data["weather"][0]["description"],
            "humidity": weather_data["main"]["humidity"],
            "wind_speed": weather_data["wind"]["speed"]
        }
    except requests.exceptions.RequestException as e:
        return {"error": f"Hava durumu API hatası: {str(e)}"}

# OpenAI ile resim analizi yapma fonksiyonu
def analyze_image_via_openai(image_url):
    """
    Firebase Storage'daki resim URL'sini OpenAI API'ye gönderir ve analiz eder.
    """
    response = openai.ChatCompletion.create(
        model="gpt-4o-mini",  
        messages=[{
            "role": "user",
            "content": [
                {"type": "text", "text": "Resimde ki insan ne giymiş?"},
                {
                    "type": "image_url",
                    "image_url": {
                        "url": image_url
                    },
                },
            ]
        }], 
        max_tokens=300
    )
    return response.choices[0].message["content"]

# LLM ve araçlar
llm = LLM(model="gpt-4o-mini", api_key=openai_api_key, temperature=0.7)
google_search = SerperDevTool(api_key=serp_api_key)

# Stil Araştırmacısı Ajanı
stil_arastirmaci = Agent(
    role="Stil Araştırmacısı",
    goal="Kullanıcının katılacağı etkinlik, toplantı veya herhangi bir yere gitmesi için uygun kıyafet trendlerini ve moda önerilerini araştırmak",
    backstory=""" 
        Sen deneyimli bir stil araştırmacısın. Kullanıcının etkinlik ve tarz tercihlerini öğrenip, en güncel moda trendlerine göre 
        öneriler hazırlarsın. Google gibi kaynaklardan güncel stil yorumlarını ve hava durumunu dikkate alarak tavsiyeler verirsin.
    """.strip(),
    tools=[google_search],
    llm=llm
)

# Stil Önerisi Yapıcı Ajanı
stil_onerisi_yapici = Agent(
    role="Moda Stilisti",
    goal="Stil araştırmacısından gelen bilgiler doğrultusunda cinsiyet, hava durumu ve katılacağı ortama uygun kıyafet önerileri sunmak",
    backstory=""" 
        Sen uzman bir moda stilistisin. Kullanıcının cinsiyetini, hava durumu koşullarını, giymek istediği bir tarz veya etkinliği dikkate alarak 
        kıyafet ve aksesuar önerileri hazırlarsın.Erkekler için daha maskülen kadınlar için daha tatlı kıyafet önerilerinde bulunursun
    """.strip(),
    tools=[],
    llm=llm
)

@app.route('/recommend', methods=['POST'])
def recommend():
    data = request.json
    topic = data.get('topic', '').strip()
    gender = data.get('gender', '').strip()
    location = data.get('location', 'İstanbul').strip()
    image_url = data.get('image_url', '')  # Flutter'dan gelen resim URL'si

    # Hava durumu bilgisi
    weather_data = get_weather_data(location, weather_api_key)
    if "error" in weather_data:
        weather_summary = f"Hava durumu alınamadı: {weather_data['error']}"
    else:
        weather_summary = (f"{weather_data['city']} için hava durumu: {weather_data['temp']}°C, "
                           f"{weather_data['description']}, Nem: {weather_data['humidity']}%, "
                           f"Rüzgar Hızı: {weather_data['wind_speed']} m/s.")

    if not topic or not gender or not location:
        return jsonify({"error": "Eksik veri: topic, gender veya location gerekli."}), 400

    # Resim URL'si ile kıyafet önerisi al
    if image_url:
        analysis_result = analyze_image_via_openai(image_url)
        analysis_result += " Bu nesne veya kıyafetle giyebileceğim kıyafet önerileri istiyorum."  # Kıyafet önerisi isteği

        # Görevler
        stil_arastirma_gorevi = Task(
            description=f"Etkinlik: {topic}, Hava Durumu: {weather_summary}",
            expected_output="Kullanıcıya uygun stil önerileri.",
            agent=stil_arastirmaci,
            tools=[google_search]
        )

        stil_onerisi_gorevi = Task(
            description=f"Etkinlik: {topic}, Cinsiyet: {gender}, Hava Durumu: {weather_summary}, Resim Analizi: {analysis_result}",
            expected_output="Kıyafet önerileri",
            agent=stil_onerisi_yapici,
            tools=[]
        )
    else:
        # Metinle kıyafet önerisi alma
        analysis_result = topic + " etkinliği için kıyafet önerisi istiyorum."

        # Görevler
        stil_arastirma_gorevi = Task(
            description=f"Etkinlik: {topic}, Hava Durumu: {weather_summary}",
            expected_output="Kullanıcıya uygun stil önerileri.",
            agent=stil_arastirmaci,
            tools=[google_search]
        )

        stil_onerisi_gorevi = Task(
            description=f"Etkinlik: {topic}, Cinsiyet: {gender}, Hava Durumu: {weather_summary}",
            expected_output="Kıyafet önerileri",
            agent=stil_onerisi_yapici,
            tools=[]
        )

    # Süreç
    crew = Crew(
        agents=[stil_arastirmaci, stil_onerisi_yapici],
        tasks=[stil_arastirma_gorevi, stil_onerisi_gorevi],
        process=Process.sequential,
        verbose=True
    )

    # Süreci çalıştır ve öneriyi al
    try:
        result = crew.kickoff(inputs={"topic": topic, "gender": gender, "location": location})

        # Raw sonucu log dosyasına ve konsola yazdırma
        result_str = str(result)  # result bir metin olduğu için doğrudan string'e dönüştürüyoruz
        
        # JSON olarak döndürülmek üzere Türkçe karakterlere uyumlu hale getirme
        result_json = json.dumps({"final_answer": result_str}, ensure_ascii=False)

        # Loglama ve konsolda gösterim
        logging.info(f"Raw result: {result_str}")
        print(f"Raw result: {result_str}")
        print(gender)

        # Flask Response kullanarak JSON'u döndür
        return app.response_class(
            response=result_json,
            status=200,
            mimetype='application/json'
        )

    except Exception as e:
        # Hata durumunda loglama ve JSON formatında hata mesajı döndürme
        error_message = f"Beklenmeyen bir hata oluştu: {str(e)}"
        logging.error(error_message)
        print(error_message)  # Konsolda da hata göstermek için
        return jsonify({"error": error_message})

if __name__ == '__main__':
    # Emülatör uyumluluğu için 0.0.0.0 ile çalıştır
    app.run(host="0.0.0.0", port=5000, debug=True)
